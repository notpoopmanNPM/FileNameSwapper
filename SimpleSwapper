package org.example;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;
import javax.swing.*;

public class Main {
    static {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        } catch (InstantiationException e) {
            throw new RuntimeException(e);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    private static final String PROPERTY_FILE_NAME = "file_paths.properties";
    private static final String FILE1_PATH_KEY = "file1Path";
    private static final String FILE2_PATH_KEY = "file2Path";
    private static final Font font = new Font("sans-serif", Font.BOLD, 14);

    public static void main(String[] args) {
        Properties properties = loadProperties();

        JFrame frame = new JFrame("File Name Swapper");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(420, 300);
        frame.setLayout(null);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        JLabel label1 = new JLabel("File 1:");
        label1.setFont(font);
        label1.setBounds(10, 20, 100, 25);
        frame.add(label1);

        JTextField file1Field = new JTextField(properties.getProperty(FILE1_PATH_KEY, ""));
        file1Field.setFont(font);
        file1Field.setBounds(100, 20, 250, 25);
        frame.add(file1Field);

        JLabel label2 = new JLabel("File 2:");
        label2.setFont(font);
        label2.setBounds(10, 60, 100, 25);
        frame.add(label2);

        JTextField file2Field = new JTextField(properties.getProperty(FILE2_PATH_KEY, ""));
        file2Field.setFont(font);
        file2Field.setBounds(100, 60, 250, 25);
        frame.add(file2Field);

        JButton swapButton = new JButton("Swap Names");
        swapButton.setFont(font);
        swapButton.setBounds(135, 100, 120, 30);
        frame.add(swapButton);

        DefaultListModel<String> fileListModel = new DefaultListModel<>();
        JList<String> fileListView = new JList<>(fileListModel);
        fileListView.setFont(font);
        fileListView.setBounds(10, 140, 380, 100);
        frame.add(fileListView);

        JScrollPane scrollPane = new JScrollPane(fileListView);
        scrollPane.setBounds(10, 140, 380, 100);
        frame.add(scrollPane);

        // Update file size labels
        updateFileList(file1Field.getText(), file2Field.getText(), fileListModel);


        swapButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String file1Path = file1Field.getText().replaceAll("\"", "");
                String file2Path = file2Field.getText().replaceAll("\"", "");
                updateFileList(file1Path, file2Path, fileListModel);
                if (!file1Path.isEmpty() && !file2Path.isEmpty()) {
                    try {
                        File file1 = new File(file1Path);
                        File file2 = new File(file2Path);

                        if (file1.exists() && file2.exists()) {
                            File tempFile = new File(file1Path + ".tmp");
                            file1.renameTo(tempFile);
                            file2.renameTo(file1);
                            tempFile.renameTo(file2);

                            properties.setProperty(FILE1_PATH_KEY, file1Path);
                            properties.setProperty(FILE2_PATH_KEY, file2Path);
                            saveProperties(properties);

                            JOptionPane.showMessageDialog(frame, "File names have been swapped successfully!");
                        } else {
                            JOptionPane.showMessageDialog(frame, "Both files must exist!");
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(frame, "Error: " + ex.getMessage());
                    }
                } else {
                    JOptionPane.showMessageDialog(frame, "Please enter both file paths!");
                }
            }
        });

        frame.setVisible(true);
    }
    private static void updateFileList(String file1Path, String file2Path, DefaultListModel<String> fileListModel) {
        File file1 = new File(file1Path);
        File file2 = new File(file2Path);

        fileListModel.clear();
        if (file1.exists() && file1.isFile()) {
            fileListModel.addElement(file1.getName() + " - " + formatFileSize(file1.length()));
        }
        if (file2.exists() && file2.isFile()) {
            fileListModel.addElement(file2.getName() + " - " + formatFileSize(file2.length()));
        }
    }
    private static String formatFileSize(long fileSizeInBytes) {
        double fileSizeInKilobytes = fileSizeInBytes / 1024.0;
        double fileSizeInMegabytes = fileSizeInKilobytes / 1024.0;
        double fileSizeInGigabytes = fileSizeInMegabytes / 1024.0;

        if (fileSizeInGigabytes >= 1) {
            return String.format("%.2f GB", fileSizeInGigabytes);
        } else if (fileSizeInMegabytes >= 1) {
            return String.format("%.2f MB", fileSizeInMegabytes);
        } else {
            return String.format("%.2f KB", fileSizeInKilobytes);
        }
    }

    private static Properties loadProperties() {
        Properties properties = new Properties();
        File propertyFile = new File(PROPERTY_FILE_NAME);

        if (propertyFile.exists()) {
            try (FileInputStream fis = new FileInputStream(propertyFile)) {
                properties.load(fis);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return properties;
    }

    private static void saveProperties(Properties properties) {
        try (FileOutputStream fos = new FileOutputStream(PROPERTY_FILE_NAME)) {
            properties.store(fos, "File paths for File Name Swapper");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
